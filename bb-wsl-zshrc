# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"

#---ALIASES---

zshconfig () {
        vim ~/.zshrc && source ~/.zshrc
        cat ~/.zshrc | sed -n '/#---ALIASES---/,$p' > ~/.zsh_aliases
}
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cd..="cd .."
alias vimrc="vim ~/.vimrc"
alias py="python3"
#alias pip="pip.exe"
alias expl="explorer.exe ."
alias ipy="ipython3.exe"
alias bat="batcat"
alias la="ls -A"
alias ip="ip -c=auto"
#alias tmux="TERM=xterm-256color tmux"
alias tmux="TERM=screen-256color-bce tmux"
alias tmp="cd ~/lab/tmp"
alias junos="cd ~/lab/calsoft/junos_cis"
alias thoughts="cd ~/lab/self;vim thoughts.th"
alias palo="cd ~/lab/calsoft/paloalto_cis"
alias getGitAuth="cat ~/.GitAuthToken | clipcopy"

export PATH=/home/amitz/.local/bin:$PATH

mcdir () {
        mkdir -p "$1" && cd "$1"
}

exp () {
        explorer.exe .
}

# BACKBOX CUSTOMIZATION:

JUNOS_PATH=/home/amitz/lab/calsoft/junos_cis
PALO_PATH=/home/amitz/lab/calsoft/paloalto_cis

# Juniper CIS print successfully tested signatures
juniprint () {
        /bin/grep -B1 "Checked Fail Remediation Success" $JUNOS_PATH/$1 | /bin/grep "Juniper ->"
}

# Palo Alto CIS print successfully tested signatures
paloprint () {
        /bin/grep -B1 "Checked Fail Remediation Success" $PALO_PATH/$1 | /bin/grep "PaloAlto ->"
}

# Juniper CIS print all signatures
junicat () {
        /bin/grep "Juniper ->" $JUNOS_PATH/$1
}

# Palo Alto CIS print all signatures
palocat () {
        /bin/grep "PaloAlto ->" $PALO_PATH/$1
}

# Juniper CIS get ALL signature names and create filter for backbox search (from review file)
afilter () {
        junicat $1 | awk '{print $5}' | tr '\n' '\|' | sed 's/.$/\n/' | clipcopy
        junicat $1 | wc -l
}

# Juniper CIS get ALL signature names and create exclusive filter
bfilter () {
        junicat $1 | awk '{print $3,$4,$5}' | sed 's/ /./g' | tr '\n' '\|' | sed 's/.$/\n/' | clipcopy
        junicat $1 | wc -l
}

# Palo Alto CIS get ALL signature names and create exclusive filter
pfilter () {
        palocat $1 | awk '{print $3,$4,$5}' | sed 's/ /./g' | tr '\n' '\|' | sed 's/.$/\n/' | clipcopy
        palocat $1 | wc -l
}

# Juniper CIS get REVIEWED signature names and create filter for backbox search (from review file)
cfilter () {
        /bin/grep -B1 "Checked" $JUNOS_PATH/$1 | /bin/grep "Juniper ->" | awk '{print $3,$4,$5}' | sed 's/ /./g' | tr '\n' '\|' | sed 's/.$/\n/' | clipcopy
        /bin/grep -B1 "Checked" $JUNOS_PATH/$1 | /bin/grep "Juniper ->" | wc -l
}

# Search reworked signature's past comments
rsearch () {
        grep -A2 -r "$1" $JUNOS_PATH/*.reply
}

# Build a mail to send to Nasirhussen
report () {
        py ~/lab/calsoft/scripts/report.py $1 $2
        if [ "$2"=="j" ]; then
                clipcopy ~/lab/calsoft/scripts/$1.feedback
        elif [ "$2"=="p" ]; then
                clipcopy ~/lab/calsoft/scripts/palo/$1.feedback
        else echo "$2 is not an option"
        fi
}


# Edit Checking files with Review files
vimr () {
        vim -c ":split ${1}reply" ${1}"k"
}

# Paste Clipboard content into Unix file
clipd () {
        clippaste > $1
        dos2unix $1
}

